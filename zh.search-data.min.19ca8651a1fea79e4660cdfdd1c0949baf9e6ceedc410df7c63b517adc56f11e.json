[{"id":0,"href":"/v2rss-docs/zh/docs/player/cli/overview/","title":"Overview","section":"脚手架指令","content":"V2RSS 脚手架指令 #  scaffold ping #  测试数据库连接。这是个不常用的功能，仅会在新环境首次创建时使用，如在 GitHub Actions 中检查配置是否正确。  scaffold decouple #  剔除 live 订阅池中的失效链接。   scaffold overdue #  剔除 live 订阅池中的过失链接。  scaffold remain #  打印 live 订阅池的运行状态，所含信息包括「订阅源」的存活数量，类型以及别名。   scaffold parse #  内置的订阅解析工具。完成订阅链接\u0026ndash;节点分享链接\u0026ndash;节点服务器明文信息的正反向解析工作。  scaffold build #  构建运行环境。这是个不常用的功能，仅会在服务首次部署时使用，如在 GitHub Actions 中拉取缺失的第三方依赖。   scaffold spawn #  一次性清空并执行本机所有采集实例。任务基于 gevent 并发执行，运行功率取决于队列大小以及本机硬件性能。  scaffold server #  部署调试服务，挂载可用的定时任务，并部署 flask 请求中转服务。任何可启动的项目都可通过配置文件精准调控。   scaffold mining #  采集、清洗、分类、存储暴露在公网上的 SSPanel-Uim 站点。少数情况下可用于扫描不携带 staff statement footer 的分类站点。  scaffold entropy #  在控制台输出本机采集队列的抽象信息。包含的字段有存活周期，源链接以及采集类型。   scaffold ash #  「实验功能」 内置的 Clash for Windows 订阅拉取组件，可实现代理节点的一键采集，清洗，转换与自动导入。  scaffold panel #  「实验功能」唤起由 Easygui 编写的仪表盘工具箱。   "},{"id":1,"href":"/v2rss-docs/zh/docs/user/bots/overview/","title":"Overview","section":"聊天机器人","content":"The bot revolution: Chatbots in automation #  Introduction to Chatbots #  「机器能否思考」这个问题历史悠久，早在1950年就已经存在， Alan Mathison Turing 提出了 图灵测试，用于测试机器能否表现出与人等价或无法区分的 智能。这一概念的现代应用常被用来帮助简化人类与信息系统之间的互动。\n「 聊天机器人」是一种能够模拟人类对话，通过图灵测试，与人类通过富文本或语音进行在线聊天对话的软件应用程序。在不断增长的数字世界中，聊天机器人已能生产环境中替代人类完成耗时的、繁琐的任务，如 客户服务或资讯获取。但遗憾的是仅有少部分聊天机器人会搭载 NLP 系统，其他大多数简单的系统只会撷取用户输入的关键字，再从数据库中找寻最合适的应答句，意味着许多投放在生产中的聊天机器人仍然无法充分地进行对话或通过行业标准的图灵测试。\n在顶层设计上，我们最常接触到的聊天机器人都具有两种属性，基于规则的应答和基于 NLP 的应答。\nRules-based Chatbots #  「响应式聊天机器人」也称基于规则的聊天机器人，它遵循预先确定的规则，常被用于功能性的引导场景。这是一个类似于流程图的过程，具有不同程度的复杂性，能够通过用户的输入获取一个映射结果。\nLive Chatbots #  「即时聊天机器人」常被用以代替销售和技术支持团队实时回答问题。NLP 赋能的聊天机器人，可以更智能地理解用户的口语和输入问题，也能让我们实现效果更佳的拟人多轮对话。这个新领域的成效远远超出了基于规则的响应式聊天机器人。\nLimitations of Chatbots #  聊天机器人仍然是一个与人工智能和机器学习有很大关系的发展中的领域，因此其在功能和使用案例方面有一些难以处理的限制：\n 由于用于生成输出的数据库是固定和有限的，响应式聊天机器人在处理未知问题时可能会失败。 聊天机器人的工作效率高度依赖于语言处理，在语音对话中常受用户口音和口误等非范式行为的限制。 行业领先的聊天机器人已能在生产中处理多轮对话问题，但仍无法处理用户同时抛出的多个问题。 性能优异的聊天机器人通常需要大量优质的对话数据来训练，所以目前行业中流行着「几家产品」与「一堆玩具」的诙谐盛况。 聊天机器人难以管理非线性对话，必须与用户在同一类（个）话题上来回对话。 来自用户的不理解与不信任，尤其是老年群体。 数据安全问题，主要来自数据污染（诱导）和接口爆破。  "},{"id":2,"href":"/v2rss-docs/zh/docs/user/v2rss-cli/overview/","title":"Overview","section":"云彩姬","content":" V2RSS 云彩姬 🚀 科学上网 从娃娃抓起\n     工具箱 #  云彩姬是一个与 V2RSS 开发者套件形成功能映射的包含「订阅获取」「生态抓取」「订阅发现」等多种组件的仪表盘工具箱。  跳板机 #  云彩姬不提供任何与「科学上网」有关的代理功能，但其各种组件「无需过墙」的特性能够在用户不幸失联时起到关键作用。  隐私透明 #  云彩姬尊重「用户隐私」；其本体基于 Easygui 设计，架构扁平透明，不包含除核心功能外的其他行为。   服务声明 🧙‍♂️ #  请项目使用者遵守如下约定，以免对你 我造成不必要的麻烦。\n 本项目开源免费，请不要滥用接口； 本项目软件及源码禁止在国内网络环境大范围传播； 禁止任何人使用本项目及其分支提供任何形式的收费代理服务。   "},{"id":3,"href":"/v2rss-docs/zh/docs/user/v2rss-shortcut/","title":"捷径","section":"使用指南","content":" V2RSS Shortcut #    「云彩姬捷径」（V2RSS Shortcut）是一个基于 捷径指令+ Shadowrocket URL Scheme 的订阅链接瞬时获取解决方案。\n  V2RSS 上游服务提供了一整套完备的订阅分发接口，iOS 用户仅需通过「云彩姬捷径」实现简单的 RPC 通信，便可拉取经过层层清洗的优质订阅节点。\n  「云彩姬捷径」共有 3 个大步骤，分别是接口请求，返回值清洗以及自启 Shadowrocket 并自动更新订阅。\n  Demo #  📌 若 shortcode 无法加载请访问 备用链接。    Quick Start #  下图为「云彩姬捷径」的模板代码。\n 展开内容 ↕  📌 为防止滥用，模板 步骤2 的测试接口已被隐去，用户若想使用属于自己的捷径指令，需要自行部署 V2RSS 上游服务。     "},{"id":4,"href":"/v2rss-docs/zh/docs/player/getting-started/overview/","title":"环境复现","section":"开始使用","content":"V2RSS 玩家手册 #   更新日期：2021/02/08\n由于开发版（Private）与稳定版（Public）架构相差巨大，本篇文档仅供参考，帮助开发者部署供私人使用的单机项目。\n 环境复现 #  📌 该项目基于 Windows 开发测试，基于 Linux 调试部署，Mac 用户可能无法正常使用。  📌 v5.u.r.beta 版本项目仍基于 Python 开发，暂未涉及 Go，也即本项目大部分高级功能暂未开源。     项目名 参考软件 备注     操作系统 Windows 家庭版 ，CentOS7 /   开发工具 Pycharm 2019.3.3 专业版 ，Goland 20.3.1 Python3.8 ，Go 1.17.2   数据库管理 RedisManagerDesktop ，Navicat Premium 15 /   远程登录 Finalshell ，Xshell/Xftp /   开发依赖 Google Chrome ， ChromeDriver /   辅助工具（Win64） Anaconda Navigator /   辅助工具（Linux） pyenv，tmux 便于版本管理与项目调试    "},{"id":5,"href":"/v2rss-docs/zh/docs/user/v2rss-cli/install/","title":"下载资源","section":"云彩姬","content":"下载资源 #  📌 云彩姬仅作 demo 使用，目前仅提供 Windows 发行客户端，暂无开发跨平台客户端的想法。  以你喜欢的方式拉取 V2RayCloudSpider 项目仓库 最新版本的发行客户端。下载解压获取 .exe 单体程序，双击运行既可启动云彩姬本姬。\n 展开插图 ↕      若您无法访问 GitHub 或不幸失联，也可以使用 CFW 反向代理加速下载。点击下方 Download 按钮既可加速下载 V2Ray云彩姬 v4.5.4 客户端，之后可通过软体内置模块拉取最新版本特性。\nDownload  "},{"id":6,"href":"/v2rss-docs/zh/docs/player/getting-started/quick-start/","title":"快速上手","section":"开始使用","content":"快速上手 #  快速部署一个可以采集订阅的 V2RSS 后端服务。\nLinux(Ubuntu) 📌 不建议使用国内厂商提供的 VPS 运行本项目。  Windows  "},{"id":7,"href":"/v2rss-docs/zh/docs/user/v2rss-cli/quick-start/","title":"快速上手","section":"云彩姬","content":"订阅链接「快速获取」 #  📌 部分订阅源拒绝国内 IP 访问，需要使用代理才能正常更新订阅。  在 Home 首页下，（以获取 V2Ray 订阅链接为例）依次选择 [2]获取订阅链接 [1]V2Ray订阅链接 既可获取订阅，如下图所示：\n 展开插图 ↕       本组件需联网使用，下图为「获取成功」的界面，点击 OK 既可自动复制链接。\n 展开插图 ↕      打开你喜欢的图形客户端，按下 Ctrl + V 既可自动添加订阅链接，更新订阅后既可拉取订阅映射的节点列表。\n 云彩姬支持主流协议订阅的采集，其他类型订阅的快速获取方法均可类比。\n 订阅链接「查询获取」 #  📌 在上一步方案中，快速获取的订阅由上游服务随机分发，而云彩姬允许使用者选取订阅。  在Home首页下，依次选择[2]获取订阅链接-\u0026gt;[4]查询可用链接，即可弹出下图所示界面。\n 展开插图 ↕      此窗格由 3 部分信息组成，分别为「过期时间」「订阅类型」以及「订阅别名」，过期时间以 Asia/Shanghai 为准。\nV2RSS 分发的订阅从服务上游开始被层层清洗，输送到使用者手中的订阅已被打上各种价值标签。使用云彩姬分发的订阅，使用者可以明确知道节点的过期时间与可用流量，而无需自建复杂的定时清洗任务，也无需亲自维护价值密度极低的代理节点池。\n云彩姬将代理节点的分发行为降至零门槛，用户只要正常打开软体，几乎只需点击「下一步」就能获取到经过上游服务层层清洗的高质量订阅链接。\n查看「访问历史」 #  这是个不常用的功能，主要用于解决一些棘手的需求场景 。例如用户在「获取成功」界面点击 OK 后，相关信息会自动流入剪贴板而后窗体自行消解，若此时有其他信息混入剪贴板，使用者又不知道如何查看剪贴板历史时，可使用「查看访问历史」功能捕获游离的数据。\n在Home首页下，选择 [3]打开本地文件 查看历史请求记录。\n 展开插图 ↕   \t   查看「机场生态」 #  📌 云彩姬内置高性能抓取模块，能够充分利用本地网络资源采集机场生态。  📌 因不可抗力因素此插件不再更新。  获取数据\n在 Home 首页下，依次选择[1]查看机场生态，[any]，[1]查看，既可查看 free/vip/all 三个层级的数据，选中项目并敲下 Enter 使用默认浏览器访问对应提供商的注册页面（部分网站需要代理访问）。\n 展开插图 ↕      保存数据\n在 Home 首页下，依次选择 [1]查看机场生态，[any]，[2]保存，既可保存 free/vip/all 三个层级的对应信息。\n 展开插图 ↕      "},{"id":8,"href":"/v2rss-docs/zh/docs/user/v2rss-cli/toc/","title":"注意事项","section":"云彩姬","content":"注意事项 #  进程冻结 #  📌 云彩姬会主动限制用户的请求频率。  软件内置的进程锁函数将综合 本地请求历史 与 服务时区残差 等多种因素锁死进程。封禁时间一般位于 15~45s 之间。\n 展开插图 ↕      其他声明 #    云彩姬是一个由维护者提供的用于项目演示的 demo，并不是一个成熟的生产工具。\n  若您在使用过程中遇到 响应迟钝，窗体消失 等问题，请检查您当前的网络状况，等待数秒后仍无响应请重启软件。\n  若无特殊需求，本项目 Panel （云彩姬）将不再升级或更新，其余项目进度将在 Projects 中公示。\n  无论是使用过程中遇到的困难，还是有关本项目的需求建议，您都可以在 issue 中留言。\n   "},{"id":9,"href":"/v2rss-docs/zh/docs/player/cli/decouple/","title":"Scaffold Decouple","section":"脚手架指令","content":"Scaffold Decouple #    发起一次对活跃订阅池的失效订阅剔除任务。探测节点服务器的摘要信息，通过简单的决策流程判断节点源状态，进而决定链接去留。满足以下任一条件的实例将被剔除：\n 订阅指向的节点无一可用； 无法正常连接目标服务器（接口关闭或服务瘫痪）； 订阅无可用流量；    V2RSS 允许多台服务器指向同一个订阅池执行 decouple 任务。\n   展开 demo ↕     "},{"id":10,"href":"/v2rss-docs/zh/docs/player/cli/overdue/","title":"Scaffold Overdue","section":"脚手架指令","content":"Scaffold Overdue #   发起一次向活跃订阅池的过时订阅清洗任务。  订阅入池时会被“人为”标注过期时间(expiration time)，此时间点严格对齐订阅源提供的免费使用时长。 执行overdue时存在预清洗操作，既若设定预清洗时长(pre-cleaning time)，则清洗目标的过期时间与任务发起时间点(当前时间)的距离小于或等于X时就会被清除，而非是过期时间小于或等于当前时间。预清洗参数让订阅分发更加科学，杜绝用户端”刚拿到手“就过期的极端情况。 Scaffold overdue pre-cleaning time 预清洗时长默认为6小时，既当任务发起时，可用市场不足6小时的链接将被剔除。     打印信息中包含信息有订阅类型及对应类型的存活数量。   展开 demo ↕     "},{"id":11,"href":"/v2rss-docs/zh/docs/player/cli/remain/","title":"Scaffold Remain","section":"脚手架指令","content":"Scaffold Remain #  打印当前链接的订阅池的状态，所含信息包括各「订阅源」的存活数量，类型以及标签名。\n 展开 demo ↕      "},{"id":12,"href":"/v2rss-docs/zh/docs/player/cli/parse/","title":"Scaffold Parse","section":"脚手架指令","content":"Scaffold Parse #  "},{"id":13,"href":"/v2rss-docs/zh/docs/player/cli/mining/","title":"Scaffold Mining","section":"脚手架指令","content":"Scaffold Mining #  📌 详见分支项目 SSPanel-Mining  采集、清洗、分类、存储暴露在公网上的 SSPanel-Uim 站点。该指令还能用于扫描不携带 staff statement footer 的分类站点。\n 指令运行 ↕      查看运行结果 ↕     "},{"id":14,"href":"/v2rss-docs/zh/docs/player/cli/entropy/","title":"Scaffold Entropy","section":"脚手架指令","content":"Scaffold Entropy #  打印当前主机活跃的采集队列，既当前采集器收到相关指令时会主动调用的任务实例。包含的信息段有存活周期 源链接 以及采集类型。\n 展开 demo ↕  {{ /expand }}\n   "},{"id":15,"href":"/v2rss-docs/zh/docs/player/cli/build/","title":"Scaffold Build","section":"脚手架指令","content":"Scaffold Build #  "},{"id":16,"href":"/v2rss-docs/zh/docs/player/cli/panel/","title":"Scaffold Panel","section":"脚手架指令","content":"Scaffold Panel #  📌 实验功能，仅 Windows 可用  唤起由Easygui编写的简易的桌面端仪表盘。\n 展开 demo ↕     "},{"id":17,"href":"/v2rss-docs/zh/docs/player/cli/ash/","title":"Scaffold Ash","section":"脚手架指令","content":"Scaffold Ash #   清洗订阅池，筛选出高可用订阅并转换为 config.yaml 配置文件； 借由 URL Scheme 自启 Clash for Windows 并自动拉取代理节点；  Runtime Demo #  uTools 一键拉取 #  演示 Windows 用户通由 QuickComment 快捷指令运行脚本，实现 Clash for Windows 订阅拉取功能。  Terminal 运行指令 #  演示 Windows 用户通由 Terminal 运行指令，实现订阅清洗、优选、转换并封装输出 Clash URL-Scheme 的过程。之后演示实验环境下的 Youtube 4K video 码率表现。   "},{"id":18,"href":"/v2rss-docs/zh/docs/player/cli/spawn/","title":"Scaffold Spawn","section":"脚手架指令","content":"Scaffold Spawn #  "},{"id":19,"href":"/v2rss-docs/zh/docs/player/cli/server/","title":"Scaffold Server","section":"脚手架指令","content":"Scaffold Server #  "},{"id":20,"href":"/v2rss-docs/zh/docs/player/cli/ping/","title":"Scaffold Ping","section":"脚手架指令","content":"Scaffold Ping #  测试数据库连接。这是个不常用的功能，仅会在新环境首次创建时使用，如 在 GitHub Actions 中检查配置是否正确。\n"}]